As for the first problem, actually we can use a customized quick sort to handle the index and number simultaneously. So the most efficient solution will be as follows, of course you can also adopt pair in C++ or counterpart in java.

```
class Solution {
private:
    void sort(vector<int>& nums, vector<int>& indexes, int begin, int end)
    {
        int l = begin, r = end;
        int v = nums[l+(r-l)/2];
        while(l <= r)
        {
            while(v > nums[l]) l++;
            while(v < nums[r]) r--;
            if(l <= r) 
            {
                swap(nums[l], nums[r]);
                swap(indexes[l], indexes[r]);
                l++, r--;
            }
        }
        if(begin < r) sort(nums, indexes, begin, r);
        if(l < end) sort(nums, indexes, l, end);
    }
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> indexes;
        for(int i = 0; i < nums.size(); ++i) indexes.push_back(i);
        sort(nums, indexes, 0, nums.size()-1);
        int i = 0, j = nums.size()-1;
        while(i < j)
        {
            int t = nums[i]+nums[j];
            if(t < target) i++;
            else if(t > target) j--;
            else break;
        }
        return vector<int>{indexes[i], indexes[j]};
    }
};
```

As to the second problem, we are to use a window to keep the longest increasing sequence where we have to use lower_bound to update the numbers in the window once we meet a smaller one, but if we meet a bigger one then we can directly append it.

A solution in C++, O(nlogn)
```
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) 
    {
        int top = -1, size = nums.size();
        if(size == 0) return 0;
        vector<int> window;
        for(int i = 0; i < size; ++i)
        {
            auto iter = lower_bound(window.begin(), window.end(), nums[i]);
            if(iter == window.end()) window.push_back(nums[i]);
            else *iter = nums[i];
        }
        return window.size();
    }
};
```

Actually we can also customise the lower_bound in C-way, which will be more efficient direclty using binary search.

```
class Solution {
private:
    int search(int arr[], int size, int target)
    {
        int l = 0, r = size-1;
        while(l < r)
        {
            int m = l+(r-l)/2;
            if(arr[m] < target) l = m+1;
            else if(arr[m] > target) r = m-1;
            else break;
        }
        return arr[l]<target? l+1 : l;
    }
public:
    int lengthOfLIS(vector<int>& nums) 
    {
        int top = -1, size = nums.size();
        if(size == 0) return 0;
        int arr[size]{0};
        for(int i = 0; i < size; ++i)
        {
            int pos = search(arr, top+1, nums[i]);
            if(pos > top) arr[++top] = nums[i];
            else arr[pos] = nums[i];
        }
        return top+1;
    }
};
```
